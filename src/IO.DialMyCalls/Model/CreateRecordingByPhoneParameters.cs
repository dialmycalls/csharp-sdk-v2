/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.DialMyCalls.Model
{
    /// <summary>
    /// CreateRecordingByPhoneParameters
    /// </summary>
    [DataContract]
    public partial class CreateRecordingByPhoneParameters :  IEquatable<CreateRecordingByPhoneParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRecordingByPhoneParameters" /> class.
        /// </summary>
        /// <param name="Name">(Required)  The name of the recording..</param>
        /// <param name="CalleridId">The caller id that the create recording message should be sent from..</param>
        /// <param name="Whitelabel">Add or remove the DialMyCalls intro message..</param>
        /// <param name="Phone">(Required)  The recipient&#39;s phone number who will record the message..</param>
        /// <param name="Extension">The recipient&#39;s phone extension up to 10 numeric digits..</param>
        public CreateRecordingByPhoneParameters(string Name = null, Guid? CalleridId = null, bool? Whitelabel = null, string Phone = null, string Extension = null)
        {
            this.Name = Name;
            this.CalleridId = CalleridId;
            this.Whitelabel = Whitelabel;
            this.Phone = Phone;
            this.Extension = Extension;
        }
        
        /// <summary>
        /// (Required)  The name of the recording.
        /// </summary>
        /// <value>(Required)  The name of the recording.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The caller id that the create recording message should be sent from.
        /// </summary>
        /// <value>The caller id that the create recording message should be sent from.</value>
        [DataMember(Name="callerid_id", EmitDefaultValue=false)]
        public Guid? CalleridId { get; set; }
        /// <summary>
        /// Add or remove the DialMyCalls intro message.
        /// </summary>
        /// <value>Add or remove the DialMyCalls intro message.</value>
        [DataMember(Name="whitelabel", EmitDefaultValue=false)]
        public bool? Whitelabel { get; set; }
        /// <summary>
        /// (Required)  The recipient&#39;s phone number who will record the message.
        /// </summary>
        /// <value>(Required)  The recipient&#39;s phone number who will record the message.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// The recipient&#39;s phone extension up to 10 numeric digits.
        /// </summary>
        /// <value>The recipient&#39;s phone extension up to 10 numeric digits.</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRecordingByPhoneParameters {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CalleridId: ").Append(CalleridId).Append("\n");
            sb.Append("  Whitelabel: ").Append(Whitelabel).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateRecordingByPhoneParameters);
        }

        /// <summary>
        /// Returns true if CreateRecordingByPhoneParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateRecordingByPhoneParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRecordingByPhoneParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CalleridId == other.CalleridId ||
                    this.CalleridId != null &&
                    this.CalleridId.Equals(other.CalleridId)
                ) && 
                (
                    this.Whitelabel == other.Whitelabel ||
                    this.Whitelabel != null &&
                    this.Whitelabel.Equals(other.Whitelabel)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CalleridId != null)
                    hash = hash * 59 + this.CalleridId.GetHashCode();
                if (this.Whitelabel != null)
                    hash = hash * 59 + this.Whitelabel.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                return hash;
            }
        }
    }

}
