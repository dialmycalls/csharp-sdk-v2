/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.DialMyCalls.Model
{
    /// <summary>
    /// CreateCallParameters
    /// </summary>
    [DataContract]
    public partial class CreateCallParameters :  IEquatable<CreateCallParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCallParameters" /> class.
        /// </summary>
        /// <param name="Name">(Required)  Name the broadcast..</param>
        /// <param name="CalleridId">(Required)  The caller id that the message should be sent from..</param>
        /// <param name="RecordingId">(Required)  The recording id of the message that should be played..</param>
        /// <param name="MachineRecordingId">The recording id of the message that should be played on answering machines.  If not supplied the recording_id will be used.  use_amd must be true in order for this feature to work..</param>
        /// <param name="SendAt">When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000).</param>
        /// <param name="SendImmediately">Should the broadcast go out immediately?.</param>
        /// <param name="UseAmd">Using answering machine detection?.</param>
        /// <param name="SendEmail">Also send an email to the contacts?.</param>
        /// <param name="AccessaccountId">Schedule this broadcast as an access account..</param>
        /// <param name="Contacts">(Required)  List of contact information that should be sent the broadcast..</param>
        /// <param name="AddOns">A list of feature add-ons for the calls..</param>
        public CreateCallParameters(string Name = null, Guid? CalleridId = null, Guid? RecordingId = null, Guid? MachineRecordingId = null, string SendAt = null, bool? SendImmediately = null, bool? UseAmd = null, bool? SendEmail = null, Guid? AccessaccountId = null, List<ContactAttributes> Contacts = null, List<PushToListenAgain> AddOns = null)
        {
            this.Name = Name;
            this.CalleridId = CalleridId;
            this.RecordingId = RecordingId;
            this.MachineRecordingId = MachineRecordingId;
            this.SendAt = SendAt;
            this.SendImmediately = SendImmediately;
            this.UseAmd = UseAmd;
            this.SendEmail = SendEmail;
            this.AccessaccountId = AccessaccountId;
            this.Contacts = Contacts;
            this.AddOns = AddOns;
        }
        
        /// <summary>
        /// (Required)  Name the broadcast.
        /// </summary>
        /// <value>(Required)  Name the broadcast.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// (Required)  The caller id that the message should be sent from.
        /// </summary>
        /// <value>(Required)  The caller id that the message should be sent from.</value>
        [DataMember(Name="callerid_id", EmitDefaultValue=false)]
        public Guid? CalleridId { get; set; }
        /// <summary>
        /// (Required)  The recording id of the message that should be played.
        /// </summary>
        /// <value>(Required)  The recording id of the message that should be played.</value>
        [DataMember(Name="recording_id", EmitDefaultValue=false)]
        public Guid? RecordingId { get; set; }
        /// <summary>
        /// The recording id of the message that should be played on answering machines.  If not supplied the recording_id will be used.  use_amd must be true in order for this feature to work.
        /// </summary>
        /// <value>The recording id of the message that should be played on answering machines.  If not supplied the recording_id will be used.  use_amd must be true in order for this feature to work.</value>
        [DataMember(Name="machine_recording_id", EmitDefaultValue=false)]
        public Guid? MachineRecordingId { get; set; }
        /// <summary>
        /// When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)
        /// </summary>
        /// <value>When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)</value>
        [DataMember(Name="send_at", EmitDefaultValue=false)]
        public string SendAt { get; set; }
        /// <summary>
        /// Should the broadcast go out immediately?
        /// </summary>
        /// <value>Should the broadcast go out immediately?</value>
        [DataMember(Name="send_immediately", EmitDefaultValue=false)]
        public bool? SendImmediately { get; set; }
        /// <summary>
        /// Using answering machine detection?
        /// </summary>
        /// <value>Using answering machine detection?</value>
        [DataMember(Name="use_amd", EmitDefaultValue=false)]
        public bool? UseAmd { get; set; }
        /// <summary>
        /// Also send an email to the contacts?
        /// </summary>
        /// <value>Also send an email to the contacts?</value>
        [DataMember(Name="send_email", EmitDefaultValue=false)]
        public bool? SendEmail { get; set; }
        /// <summary>
        /// Schedule this broadcast as an access account.
        /// </summary>
        /// <value>Schedule this broadcast as an access account.</value>
        [DataMember(Name="accessaccount_id", EmitDefaultValue=false)]
        public Guid? AccessaccountId { get; set; }
        /// <summary>
        /// (Required)  List of contact information that should be sent the broadcast.
        /// </summary>
        /// <value>(Required)  List of contact information that should be sent the broadcast.</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ContactAttributes> Contacts { get; set; }
        /// <summary>
        /// A list of feature add-ons for the calls.
        /// </summary>
        /// <value>A list of feature add-ons for the calls.</value>
        [DataMember(Name="add_ons", EmitDefaultValue=false)]
        public List<PushToListenAgain> AddOns { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCallParameters {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CalleridId: ").Append(CalleridId).Append("\n");
            sb.Append("  RecordingId: ").Append(RecordingId).Append("\n");
            sb.Append("  MachineRecordingId: ").Append(MachineRecordingId).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  SendImmediately: ").Append(SendImmediately).Append("\n");
            sb.Append("  UseAmd: ").Append(UseAmd).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  AccessaccountId: ").Append(AccessaccountId).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  AddOns: ").Append(AddOns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateCallParameters);
        }

        /// <summary>
        /// Returns true if CreateCallParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCallParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCallParameters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CalleridId == other.CalleridId ||
                    this.CalleridId != null &&
                    this.CalleridId.Equals(other.CalleridId)
                ) && 
                (
                    this.RecordingId == other.RecordingId ||
                    this.RecordingId != null &&
                    this.RecordingId.Equals(other.RecordingId)
                ) && 
                (
                    this.MachineRecordingId == other.MachineRecordingId ||
                    this.MachineRecordingId != null &&
                    this.MachineRecordingId.Equals(other.MachineRecordingId)
                ) && 
                (
                    this.SendAt == other.SendAt ||
                    this.SendAt != null &&
                    this.SendAt.Equals(other.SendAt)
                ) && 
                (
                    this.SendImmediately == other.SendImmediately ||
                    this.SendImmediately != null &&
                    this.SendImmediately.Equals(other.SendImmediately)
                ) && 
                (
                    this.UseAmd == other.UseAmd ||
                    this.UseAmd != null &&
                    this.UseAmd.Equals(other.UseAmd)
                ) && 
                (
                    this.SendEmail == other.SendEmail ||
                    this.SendEmail != null &&
                    this.SendEmail.Equals(other.SendEmail)
                ) && 
                (
                    this.AccessaccountId == other.AccessaccountId ||
                    this.AccessaccountId != null &&
                    this.AccessaccountId.Equals(other.AccessaccountId)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    this.AddOns == other.AddOns ||
                    this.AddOns != null &&
                    this.AddOns.SequenceEqual(other.AddOns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CalleridId != null)
                    hash = hash * 59 + this.CalleridId.GetHashCode();
                if (this.RecordingId != null)
                    hash = hash * 59 + this.RecordingId.GetHashCode();
                if (this.MachineRecordingId != null)
                    hash = hash * 59 + this.MachineRecordingId.GetHashCode();
                if (this.SendAt != null)
                    hash = hash * 59 + this.SendAt.GetHashCode();
                if (this.SendImmediately != null)
                    hash = hash * 59 + this.SendImmediately.GetHashCode();
                if (this.UseAmd != null)
                    hash = hash * 59 + this.UseAmd.GetHashCode();
                if (this.SendEmail != null)
                    hash = hash * 59 + this.SendEmail.GetHashCode();
                if (this.AccessaccountId != null)
                    hash = hash * 59 + this.AccessaccountId.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.AddOns != null)
                    hash = hash * 59 + this.AddOns.GetHashCode();
                return hash;
            }
        }
    }

}
