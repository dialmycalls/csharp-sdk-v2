/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.DialMyCalls.Model
{
    /// <summary>
    /// Vanitynumber
    /// </summary>
    [DataContract]
    public partial class Vanitynumber :  IEquatable<Vanitynumber>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vanitynumber" /> class.
        /// </summary>
        /// <param name="Id">Unique identifier for this group..</param>
        /// <param name="Phone">The phone number..</param>
        /// <param name="Status">The status of the vanity number. Options: active, onhold, billingdecline, pendingdelete.</param>
        /// <param name="MinutesUsed">The amount of minutes used since last billing..</param>
        /// <param name="MinutesAllowed">The amount of minutes included with the vanity number before billed additionally..</param>
        /// <param name="VoicemailsNew">The amount of voicemails that have not been downloaded..</param>
        /// <param name="VoicemailsOld">The amount of voicemails that have been downloaded..</param>
        /// <param name="CreatedAt">When the keyword was created..</param>
        /// <param name="UpdatedAt">When the keyword was last updated..</param>
        public Vanitynumber(Guid? Id = null, string Phone = null, string Status = null, float? MinutesUsed = null, float? MinutesAllowed = null, int? VoicemailsNew = null, int? VoicemailsOld = null, string CreatedAt = null, string UpdatedAt = null)
        {
            this.Id = Id;
            this.Phone = Phone;
            this.Status = Status;
            this.MinutesUsed = MinutesUsed;
            this.MinutesAllowed = MinutesAllowed;
            this.VoicemailsNew = VoicemailsNew;
            this.VoicemailsOld = VoicemailsOld;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Unique identifier for this group.
        /// </summary>
        /// <value>Unique identifier for this group.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// The phone number.
        /// </summary>
        /// <value>The phone number.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// The status of the vanity number. Options: active, onhold, billingdecline, pendingdelete
        /// </summary>
        /// <value>The status of the vanity number. Options: active, onhold, billingdecline, pendingdelete</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The amount of minutes used since last billing.
        /// </summary>
        /// <value>The amount of minutes used since last billing.</value>
        [DataMember(Name="minutes_used", EmitDefaultValue=false)]
        public float? MinutesUsed { get; set; }
        /// <summary>
        /// The amount of minutes included with the vanity number before billed additionally.
        /// </summary>
        /// <value>The amount of minutes included with the vanity number before billed additionally.</value>
        [DataMember(Name="minutes_allowed", EmitDefaultValue=false)]
        public float? MinutesAllowed { get; set; }
        /// <summary>
        /// The amount of voicemails that have not been downloaded.
        /// </summary>
        /// <value>The amount of voicemails that have not been downloaded.</value>
        [DataMember(Name="voicemails_new", EmitDefaultValue=false)]
        public int? VoicemailsNew { get; set; }
        /// <summary>
        /// The amount of voicemails that have been downloaded.
        /// </summary>
        /// <value>The amount of voicemails that have been downloaded.</value>
        [DataMember(Name="voicemails_old", EmitDefaultValue=false)]
        public int? VoicemailsOld { get; set; }
        /// <summary>
        /// When the keyword was created.
        /// </summary>
        /// <value>When the keyword was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// When the keyword was last updated.
        /// </summary>
        /// <value>When the keyword was last updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vanitynumber {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MinutesUsed: ").Append(MinutesUsed).Append("\n");
            sb.Append("  MinutesAllowed: ").Append(MinutesAllowed).Append("\n");
            sb.Append("  VoicemailsNew: ").Append(VoicemailsNew).Append("\n");
            sb.Append("  VoicemailsOld: ").Append(VoicemailsOld).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Vanitynumber);
        }

        /// <summary>
        /// Returns true if Vanitynumber instances are equal
        /// </summary>
        /// <param name="other">Instance of Vanitynumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vanitynumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.MinutesUsed == other.MinutesUsed ||
                    this.MinutesUsed != null &&
                    this.MinutesUsed.Equals(other.MinutesUsed)
                ) && 
                (
                    this.MinutesAllowed == other.MinutesAllowed ||
                    this.MinutesAllowed != null &&
                    this.MinutesAllowed.Equals(other.MinutesAllowed)
                ) && 
                (
                    this.VoicemailsNew == other.VoicemailsNew ||
                    this.VoicemailsNew != null &&
                    this.VoicemailsNew.Equals(other.VoicemailsNew)
                ) && 
                (
                    this.VoicemailsOld == other.VoicemailsOld ||
                    this.VoicemailsOld != null &&
                    this.VoicemailsOld.Equals(other.VoicemailsOld)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.MinutesUsed != null)
                    hash = hash * 59 + this.MinutesUsed.GetHashCode();
                if (this.MinutesAllowed != null)
                    hash = hash * 59 + this.MinutesAllowed.GetHashCode();
                if (this.VoicemailsNew != null)
                    hash = hash * 59 + this.VoicemailsNew.GetHashCode();
                if (this.VoicemailsOld != null)
                    hash = hash * 59 + this.VoicemailsOld.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }
    }

}
