/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.DialMyCalls.Client;
using IO.DialMyCalls.Model;

namespace IO.DialMyCalls.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordings : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Recording (Text-to-Speech)
        /// </summary>
        /// <remarks>
        /// Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateRecording (CreateRecordingParameters createRecordingParameters);

        /// <summary>
        /// Create Recording (Text-to-Speech)
        /// </summary>
        /// <remarks>
        /// Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRecordingWithHttpInfo (CreateRecordingParameters createRecordingParameters);
        /// <summary>
        /// Create Recording (Phone)
        /// </summary>
        /// <remarks>
        /// Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateRecordingByPhone (CreateRecordingByPhoneParameters createRecordingByPhoneParameters);

        /// <summary>
        /// Create Recording (Phone)
        /// </summary>
        /// <remarks>
        /// Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRecordingByPhoneWithHttpInfo (CreateRecordingByPhoneParameters createRecordingByPhoneParameters);
        /// <summary>
        /// Create Recording (URL)
        /// </summary>
        /// <remarks>
        /// Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateRecordingByUrl (CreateRecordingByUrlParameters createRecordingByUrlParameters);

        /// <summary>
        /// Create Recording (URL)
        /// </summary>
        /// <remarks>
        /// Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateRecordingByUrlWithHttpInfo (CreateRecordingByUrlParameters createRecordingByUrlParameters);
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        Object DeleteRecordingById (string recordingId);

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteRecordingByIdWithHttpInfo (string recordingId);
        /// <summary>
        /// Get Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        Object GetRecordingById (string recordingId);

        /// <summary>
        /// Get Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetRecordingByIdWithHttpInfo (string recordingId);
        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Object</returns>
        Object GetRecordings (string range = null);

        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetRecordingsWithHttpInfo (string range = null);
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        Object UpdateRecordingById (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId);

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateRecordingByIdWithHttpInfo (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Recording (Text-to-Speech)
        /// </summary>
        /// <remarks>
        /// Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRecordingAsync (CreateRecordingParameters createRecordingParameters);

        /// <summary>
        /// Create Recording (Text-to-Speech)
        /// </summary>
        /// <remarks>
        /// Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingAsyncWithHttpInfo (CreateRecordingParameters createRecordingParameters);
        /// <summary>
        /// Create Recording (Phone)
        /// </summary>
        /// <remarks>
        /// Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRecordingByPhoneAsync (CreateRecordingByPhoneParameters createRecordingByPhoneParameters);

        /// <summary>
        /// Create Recording (Phone)
        /// </summary>
        /// <remarks>
        /// Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingByPhoneAsyncWithHttpInfo (CreateRecordingByPhoneParameters createRecordingByPhoneParameters);
        /// <summary>
        /// Create Recording (URL)
        /// </summary>
        /// <remarks>
        /// Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateRecordingByUrlAsync (CreateRecordingByUrlParameters createRecordingByUrlParameters);

        /// <summary>
        /// Create Recording (URL)
        /// </summary>
        /// <remarks>
        /// Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingByUrlAsyncWithHttpInfo (CreateRecordingByUrlParameters createRecordingByUrlParameters);
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteRecordingByIdAsync (string recordingId);

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingByIdAsyncWithHttpInfo (string recordingId);
        /// <summary>
        /// Get Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetRecordingByIdAsync (string recordingId);

        /// <summary>
        /// Get Recording
        /// </summary>
        /// <remarks>
        /// Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingByIdAsyncWithHttpInfo (string recordingId);
        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetRecordingsAsync (string range = null);

        /// <summary>
        /// List Recordings
        /// </summary>
        /// <remarks>
        /// Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingsAsyncWithHttpInfo (string range = null);
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateRecordingByIdAsync (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId);

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRecordingByIdAsyncWithHttpInfo (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Recordings : IRecordings
    {
        private IO.DialMyCalls.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Recordings"/> class.
        /// </summary>
        /// <returns></returns>
        public Recordings(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Recordings"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Recordings(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.DialMyCalls.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Recording (Text-to-Speech) Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateRecording (CreateRecordingParameters createRecordingParameters)
        {
             ApiResponse<Object> localVarResponse = CreateRecordingWithHttpInfo(createRecordingParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recording (Text-to-Speech) Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateRecordingWithHttpInfo (CreateRecordingParameters createRecordingParameters)
        {
            // verify the required parameter 'createRecordingParameters' is set
            if (createRecordingParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingParameters' when calling Recordings->CreateRecording");

            var localVarPath = "/recording/tts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingParameters != null && createRecordingParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Recording (Text-to-Speech) Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRecordingAsync (CreateRecordingParameters createRecordingParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateRecordingAsyncWithHttpInfo(createRecordingParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Recording (Text-to-Speech) Create a new recording using text-to-speech. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;gender\\\&quot;: \\\&quot;M\\\&quot;, \\\&quot;language\\\&quot;: \\\&quot;en\\\&quot;, \\\&quot;text\\\&quot;: \\\&quot;This is just a test.\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/tts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingAsyncWithHttpInfo (CreateRecordingParameters createRecordingParameters)
        {
            // verify the required parameter 'createRecordingParameters' is set
            if (createRecordingParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingParameters' when calling Recordings->CreateRecording");

            var localVarPath = "/recording/tts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingParameters != null && createRecordingParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Recording (Phone) Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateRecordingByPhone (CreateRecordingByPhoneParameters createRecordingByPhoneParameters)
        {
             ApiResponse<Object> localVarResponse = CreateRecordingByPhoneWithHttpInfo(createRecordingByPhoneParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recording (Phone) Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateRecordingByPhoneWithHttpInfo (CreateRecordingByPhoneParameters createRecordingByPhoneParameters)
        {
            // verify the required parameter 'createRecordingByPhoneParameters' is set
            if (createRecordingByPhoneParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingByPhoneParameters' when calling Recordings->CreateRecordingByPhone");

            var localVarPath = "/recording/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingByPhoneParameters != null && createRecordingByPhoneParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingByPhoneParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingByPhoneParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecordingByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Recording (Phone) Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRecordingByPhoneAsync (CreateRecordingByPhoneParameters createRecordingByPhoneParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateRecordingByPhoneAsyncWithHttpInfo(createRecordingByPhoneParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Recording (Phone) Create a new recording by phone. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;phone\\\&quot;: \\\&quot;5551234567\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;$CALLERID_ID\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/phone &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByPhoneParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingByPhoneAsyncWithHttpInfo (CreateRecordingByPhoneParameters createRecordingByPhoneParameters)
        {
            // verify the required parameter 'createRecordingByPhoneParameters' is set
            if (createRecordingByPhoneParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingByPhoneParameters' when calling Recordings->CreateRecordingByPhone");

            var localVarPath = "/recording/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingByPhoneParameters != null && createRecordingByPhoneParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingByPhoneParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingByPhoneParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecordingByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Recording (URL) Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateRecordingByUrl (CreateRecordingByUrlParameters createRecordingByUrlParameters)
        {
             ApiResponse<Object> localVarResponse = CreateRecordingByUrlWithHttpInfo(createRecordingByUrlParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recording (URL) Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateRecordingByUrlWithHttpInfo (CreateRecordingByUrlParameters createRecordingByUrlParameters)
        {
            // verify the required parameter 'createRecordingByUrlParameters' is set
            if (createRecordingByUrlParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingByUrlParameters' when calling Recordings->CreateRecordingByUrl");

            var localVarPath = "/recording/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingByUrlParameters != null && createRecordingByUrlParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingByUrlParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingByUrlParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecordingByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Recording (URL) Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateRecordingByUrlAsync (CreateRecordingByUrlParameters createRecordingByUrlParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateRecordingByUrlAsyncWithHttpInfo(createRecordingByUrlParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Recording (URL) Create a new recording from a URL. &lt;br&gt;&lt;br&gt; Returns a recording object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording\\\&quot;, \\\&quot;url\\\&quot;: \\\&quot;https://ia700200.us.archive.org/1/items/testmp3testfile/mpthreetest.mp3\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/url &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRecordingByUrlParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRecordingByUrlAsyncWithHttpInfo (CreateRecordingByUrlParameters createRecordingByUrlParameters)
        {
            // verify the required parameter 'createRecordingByUrlParameters' is set
            if (createRecordingByUrlParameters == null)
                throw new ApiException(400, "Missing required parameter 'createRecordingByUrlParameters' when calling Recordings->CreateRecordingByUrl");

            var localVarPath = "/recording/url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createRecordingByUrlParameters != null && createRecordingByUrlParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createRecordingByUrlParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createRecordingByUrlParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecordingByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Recording Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        public Object DeleteRecordingById (string recordingId)
        {
             ApiResponse<Object> localVarResponse = DeleteRecordingByIdWithHttpInfo(recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Recording Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteRecordingByIdWithHttpInfo (string recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->DeleteRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Recording Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteRecordingByIdAsync (string recordingId)
        {
             ApiResponse<Object> localVarResponse = await DeleteRecordingByIdAsyncWithHttpInfo(recordingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Recording Delete a recording. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingByIdAsyncWithHttpInfo (string recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->DeleteRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Recording Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        public Object GetRecordingById (string recordingId)
        {
             ApiResponse<Object> localVarResponse = GetRecordingByIdWithHttpInfo(recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recording Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetRecordingByIdWithHttpInfo (string recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->GetRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Recording Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetRecordingByIdAsync (string recordingId)
        {
             ApiResponse<Object> localVarResponse = await GetRecordingByIdAsyncWithHttpInfo(recordingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Recording Retrieve a recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingByIdAsyncWithHttpInfo (string recordingId)
        {
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->GetRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Recordings Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Object</returns>
        public Object GetRecordings (string range = null)
        {
             ApiResponse<Object> localVarResponse = GetRecordingsWithHttpInfo(range);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Recordings Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetRecordingsWithHttpInfo (string range = null)
        {

            var localVarPath = "/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Recordings Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetRecordingsAsync (string range = null)
        {
             ApiResponse<Object> localVarResponse = await GetRecordingsAsyncWithHttpInfo(range);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Recordings Retrieve a list of recordings. &lt;br&gt;&lt;br&gt; Returns a list of recording objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/recordings &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recordings requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetRecordingsAsyncWithHttpInfo (string range = null)
        {

            var localVarPath = "/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Recording Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Object</returns>
        public Object UpdateRecordingById (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId)
        {
             ApiResponse<Object> localVarResponse = UpdateRecordingByIdWithHttpInfo(updateRecordingByIdParameters, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Recording Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateRecordingByIdWithHttpInfo (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId)
        {
            // verify the required parameter 'updateRecordingByIdParameters' is set
            if (updateRecordingByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateRecordingByIdParameters' when calling Recordings->UpdateRecordingById");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->UpdateRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (updateRecordingByIdParameters != null && updateRecordingByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateRecordingByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRecordingByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Recording Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateRecordingByIdAsync (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId)
        {
             ApiResponse<Object> localVarResponse = await UpdateRecordingByIdAsyncWithHttpInfo(updateRecordingByIdParameters, recordingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Recording Update an existing recording. &lt;br&gt;&lt;br&gt; Returns a recording object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test Recording Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/recording/$RECORDING_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRecordingByIdParameters">Request body</param>
        /// <param name="recordingId">RecordingId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRecordingByIdAsyncWithHttpInfo (UpdateRecordingByIdParameters updateRecordingByIdParameters, string recordingId)
        {
            // verify the required parameter 'updateRecordingByIdParameters' is set
            if (updateRecordingByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateRecordingByIdParameters' when calling Recordings->UpdateRecordingById");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling Recordings->UpdateRecordingById");

            var localVarPath = "/recording/{RecordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (recordingId != null) localVarPathParams.Add("RecordingId", Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (updateRecordingByIdParameters != null && updateRecordingByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateRecordingByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateRecordingByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRecordingById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
