/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.DialMyCalls.Client;
using IO.DialMyCalls.Model;

namespace IO.DialMyCalls.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalls : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Call
        /// </summary>
        /// <remarks>
        /// Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Object</returns>
        Object CancelCallById (string callId);

        /// <summary>
        /// Cancel Call
        /// </summary>
        /// <remarks>
        /// Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelCallByIdWithHttpInfo (string callId);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateCall (CreateCallParameters createCallParameters);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateCallWithHttpInfo (CreateCallParameters createCallParameters);
        /// <summary>
        /// Get Call
        /// </summary>
        /// <remarks>
        /// Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Object</returns>
        Object GetCallById (string callId);

        /// <summary>
        /// Get Call
        /// </summary>
        /// <remarks>
        /// Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetCallByIdWithHttpInfo (string callId);
        /// <summary>
        /// Get Call Recipients
        /// </summary>
        /// <remarks>
        /// Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Object</returns>
        Object GetCallRecipientsByCallId (string callId, string range = null);

        /// <summary>
        /// Get Call Recipients
        /// </summary>
        /// <remarks>
        /// Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetCallRecipientsByCallIdWithHttpInfo (string callId, string range = null);
        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Object</returns>
        Object GetCalls (string range = null);

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetCallsWithHttpInfo (string range = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Call
        /// </summary>
        /// <remarks>
        /// Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelCallByIdAsync (string callId);

        /// <summary>
        /// Cancel Call
        /// </summary>
        /// <remarks>
        /// Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelCallByIdAsyncWithHttpInfo (string callId);
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateCallAsync (CreateCallParameters createCallParameters);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCallAsyncWithHttpInfo (CreateCallParameters createCallParameters);
        /// <summary>
        /// Get Call
        /// </summary>
        /// <remarks>
        /// Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetCallByIdAsync (string callId);

        /// <summary>
        /// Get Call
        /// </summary>
        /// <remarks>
        /// Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCallByIdAsyncWithHttpInfo (string callId);
        /// <summary>
        /// Get Call Recipients
        /// </summary>
        /// <remarks>
        /// Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetCallRecipientsByCallIdAsync (string callId, string range = null);

        /// <summary>
        /// Get Call Recipients
        /// </summary>
        /// <remarks>
        /// Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCallRecipientsByCallIdAsyncWithHttpInfo (string callId, string range = null);
        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetCallsAsync (string range = null);

        /// <summary>
        /// List Calls
        /// </summary>
        /// <remarks>
        /// Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetCallsAsyncWithHttpInfo (string range = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Calls : ICalls
    {
        private IO.DialMyCalls.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Calls"/> class.
        /// </summary>
        /// <returns></returns>
        public Calls(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Calls"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Calls(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.DialMyCalls.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel Call Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Object</returns>
        public Object CancelCallById (string callId)
        {
             ApiResponse<Object> localVarResponse = CancelCallByIdWithHttpInfo(callId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Call Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CancelCallByIdWithHttpInfo (string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->CancelCallById");

            var localVarPath = "/service/call/{CallId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCallById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Cancel Call Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelCallByIdAsync (string callId)
        {
             ApiResponse<Object> localVarResponse = await CancelCallByIdAsyncWithHttpInfo(callId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Call Cancel an outgoing call. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelCallByIdAsyncWithHttpInfo (string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->CancelCallById");

            var localVarPath = "/service/call/{CallId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelCallById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Call Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateCall (CreateCallParameters createCallParameters)
        {
             ApiResponse<Object> localVarResponse = CreateCallWithHttpInfo(createCallParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateCallWithHttpInfo (CreateCallParameters createCallParameters)
        {
            // verify the required parameter 'createCallParameters' is set
            if (createCallParameters == null)
                throw new ApiException(400, "Missing required parameter 'createCallParameters' when calling Calls->CreateCall");

            var localVarPath = "/service/call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createCallParameters != null && createCallParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCallParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create Call Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateCallAsync (CreateCallParameters createCallParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateCallAsyncWithHttpInfo(createCallParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Call Create an outgoing call broadcast. &lt;br&gt;&lt;br&gt; Returns a call service object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;Test\\\&quot;, \\\&quot;callerid_id\\\&quot;: \\\&quot;8bc6748e-d8a0-11e4-8b2d-00163e603cea\\\&quot;, \\\&quot;recording_id\\\&quot;: \\\&quot;079ff28a-1b75-11e5-88eb-00163e603cea\\\&quot;, \\\&quot;send_immediately\\\&quot;: true, \\\&quot;use_amd\\\&quot;: true, \\\&quot;contacts\\\&quot;: [{\\\&quot;phone\\\&quot;:\\\&quot;1116551235\\\&quot;},{\\\&quot;phone\\\&quot;:\\\&quot;1116551234\\\&quot;}]}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/service/call &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCallParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateCallAsyncWithHttpInfo (CreateCallParameters createCallParameters)
        {
            // verify the required parameter 'createCallParameters' is set
            if (createCallParameters == null)
                throw new ApiException(400, "Missing required parameter 'createCallParameters' when calling Calls->CreateCall");

            var localVarPath = "/service/call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createCallParameters != null && createCallParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createCallParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCallParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Call Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Object</returns>
        public Object GetCallById (string callId)
        {
             ApiResponse<Object> localVarResponse = GetCallByIdWithHttpInfo(callId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetCallByIdWithHttpInfo (string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->GetCallById");

            var localVarPath = "/service/call/{CallId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Call Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetCallByIdAsync (string callId)
        {
             ApiResponse<Object> localVarResponse = await GetCallByIdAsyncWithHttpInfo(callId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Retrieve a call. &lt;br&gt;&lt;br&gt; Returns a call service object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCallByIdAsyncWithHttpInfo (string callId)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->GetCallById");

            var localVarPath = "/service/call/{CallId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Call Recipients Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Object</returns>
        public Object GetCallRecipientsByCallId (string callId, string range = null)
        {
             ApiResponse<Object> localVarResponse = GetCallRecipientsByCallIdWithHttpInfo(callId, range);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recipients Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetCallRecipientsByCallIdWithHttpInfo (string callId, string range = null)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->GetCallRecipientsByCallId");

            var localVarPath = "/service/call/{CallId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallRecipientsByCallId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Call Recipients Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetCallRecipientsByCallIdAsync (string callId, string range = null)
        {
             ApiResponse<Object> localVarResponse = await GetCallRecipientsByCallIdAsyncWithHttpInfo(callId, range);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recipients Retrieve a list of a call&#39;s recipients. &lt;br&gt;&lt;br&gt; Returns a list of call recipient objects if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/call/$CALL_ID/recipients &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callId">CallId</param>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of recipients requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCallRecipientsByCallIdAsyncWithHttpInfo (string callId, string range = null)
        {
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling Calls->GetCallRecipientsByCallId");

            var localVarPath = "/service/call/{CallId}/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (callId != null) localVarPathParams.Add("CallId", Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallRecipientsByCallId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Calls Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Object</returns>
        public Object GetCalls (string range = null)
        {
             ApiResponse<Object> localVarResponse = GetCallsWithHttpInfo(range);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Calls Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetCallsWithHttpInfo (string range = null)
        {

            var localVarPath = "/service/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Calls Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetCallsAsync (string range = null)
        {
             ApiResponse<Object> localVarResponse = await GetCallsAsyncWithHttpInfo(range);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Calls Retrieve a list of calls. &lt;br&gt;&lt;br&gt; Returns a list of call service objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/service/calls &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of calls requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetCallsAsyncWithHttpInfo (string range = null)
        {

            var localVarPath = "/service/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
