/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.DialMyCalls.Client;
using IO.DialMyCalls.Model;

namespace IO.DialMyCalls.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccounts : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Access Account
        /// </summary>
        /// <remarks>
        /// Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateAccessAccount (CreateAccessAccountParameters createAccessAccountParameters);

        /// <summary>
        /// Add Access Account
        /// </summary>
        /// <remarks>
        /// Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateAccessAccountWithHttpInfo (CreateAccessAccountParameters createAccessAccountParameters);
        /// <summary>
        /// Delete Access Account
        /// </summary>
        /// <remarks>
        /// Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        Object DeleteAccessAccountById (string accessAccountId);

        /// <summary>
        /// Delete Access Account
        /// </summary>
        /// <remarks>
        /// Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAccessAccountByIdWithHttpInfo (string accessAccountId);
        /// <summary>
        /// Get Access Account
        /// </summary>
        /// <remarks>
        /// Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        Object GetAccessAccountById (string accessAccountId);

        /// <summary>
        /// Get Access Account
        /// </summary>
        /// <remarks>
        /// Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAccessAccountByIdWithHttpInfo (string accessAccountId);
        /// <summary>
        /// List Access Accounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Object</returns>
        Object GetAccessAccounts (string range = null);

        /// <summary>
        /// List Access Accounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAccessAccountsWithHttpInfo (string range = null);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GetAccount ();

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAccountWithHttpInfo ();
        /// <summary>
        /// Update Access Account
        /// </summary>
        /// <remarks>
        /// Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        Object UpdateAccessAccountById (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId);

        /// <summary>
        /// Update Access Account
        /// </summary>
        /// <remarks>
        /// Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateAccessAccountByIdWithHttpInfo (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Access Account
        /// </summary>
        /// <remarks>
        /// Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAccessAccountAsync (CreateAccessAccountParameters createAccessAccountParameters);

        /// <summary>
        /// Add Access Account
        /// </summary>
        /// <remarks>
        /// Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAccessAccountAsyncWithHttpInfo (CreateAccessAccountParameters createAccessAccountParameters);
        /// <summary>
        /// Delete Access Account
        /// </summary>
        /// <remarks>
        /// Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAccessAccountByIdAsync (string accessAccountId);

        /// <summary>
        /// Delete Access Account
        /// </summary>
        /// <remarks>
        /// Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccessAccountByIdAsyncWithHttpInfo (string accessAccountId);
        /// <summary>
        /// Get Access Account
        /// </summary>
        /// <remarks>
        /// Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAccessAccountByIdAsync (string accessAccountId);

        /// <summary>
        /// Get Access Account
        /// </summary>
        /// <remarks>
        /// Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAccessAccountByIdAsyncWithHttpInfo (string accessAccountId);
        /// <summary>
        /// List Access Accounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAccessAccountsAsync (string range = null);

        /// <summary>
        /// List Access Accounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAccessAccountsAsyncWithHttpInfo (string range = null);
        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAccountAsync ();

        /// <summary>
        /// Get Account
        /// </summary>
        /// <remarks>
        /// Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAccountAsyncWithHttpInfo ();
        /// <summary>
        /// Update Access Account
        /// </summary>
        /// <remarks>
        /// Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAccessAccountByIdAsync (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId);

        /// <summary>
        /// Update Access Account
        /// </summary>
        /// <remarks>
        /// Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAccessAccountByIdAsyncWithHttpInfo (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Accounts : IAccounts
    {
        private IO.DialMyCalls.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Accounts"/> class.
        /// </summary>
        /// <returns></returns>
        public Accounts(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Accounts"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Accounts(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.DialMyCalls.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Access Account Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateAccessAccount (CreateAccessAccountParameters createAccessAccountParameters)
        {
             ApiResponse<Object> localVarResponse = CreateAccessAccountWithHttpInfo(createAccessAccountParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Access Account Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateAccessAccountWithHttpInfo (CreateAccessAccountParameters createAccessAccountParameters)
        {
            // verify the required parameter 'createAccessAccountParameters' is set
            if (createAccessAccountParameters == null)
                throw new ApiException(400, "Missing required parameter 'createAccessAccountParameters' when calling Accounts->CreateAccessAccount");

            var localVarPath = "/accessaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createAccessAccountParameters != null && createAccessAccountParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createAccessAccountParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAccessAccountParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccessAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add Access Account Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAccessAccountAsync (CreateAccessAccountParameters createAccessAccountParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateAccessAccountAsyncWithHttpInfo(createAccessAccountParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Access Account Add a access account. &lt;br&gt;&lt;br&gt; Returns a access account object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;email\\\&quot;: \\\&quot;test@test.com\\\&quot;, \\\&quot;password\\\&quot;: \\\&quot;1234A5678\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;John Doe\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccessAccountParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAccessAccountAsyncWithHttpInfo (CreateAccessAccountParameters createAccessAccountParameters)
        {
            // verify the required parameter 'createAccessAccountParameters' is set
            if (createAccessAccountParameters == null)
                throw new ApiException(400, "Missing required parameter 'createAccessAccountParameters' when calling Accounts->CreateAccessAccount");

            var localVarPath = "/accessaccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createAccessAccountParameters != null && createAccessAccountParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createAccessAccountParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAccessAccountParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccessAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Access Account Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        public Object DeleteAccessAccountById (string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = DeleteAccessAccountByIdWithHttpInfo(accessAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Access Account Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteAccessAccountByIdWithHttpInfo (string accessAccountId)
        {
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->DeleteAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Access Account Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAccessAccountByIdAsync (string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = await DeleteAccessAccountByIdAsyncWithHttpInfo(accessAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Access Account Delete a access account. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccessAccountByIdAsyncWithHttpInfo (string accessAccountId)
        {
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->DeleteAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Access Account Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        public Object GetAccessAccountById (string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = GetAccessAccountByIdWithHttpInfo(accessAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Access Account Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAccessAccountByIdWithHttpInfo (string accessAccountId)
        {
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->GetAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Access Account Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAccessAccountByIdAsync (string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = await GetAccessAccountByIdAsyncWithHttpInfo(accessAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Access Account Retrieve an access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAccessAccountByIdAsyncWithHttpInfo (string accessAccountId)
        {
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->GetAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Access Accounts Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Object</returns>
        public Object GetAccessAccounts (string range = null)
        {
             ApiResponse<Object> localVarResponse = GetAccessAccountsWithHttpInfo(range);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Access Accounts Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAccessAccountsWithHttpInfo (string range = null)
        {

            var localVarPath = "/accessaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Access Accounts Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAccessAccountsAsync (string range = null)
        {
             ApiResponse<Object> localVarResponse = await GetAccessAccountsAsyncWithHttpInfo(range);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Access Accounts Retrieve a list of access accounts. &lt;br&gt;&lt;br&gt; Returns a list of access account objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/accessaccounts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of accessaccounts requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAccessAccountsAsyncWithHttpInfo (string range = null)
        {

            var localVarPath = "/accessaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Account Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GetAccount ()
        {
             ApiResponse<Object> localVarResponse = GetAccountWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAccountWithHttpInfo ()
        {

            var localVarPath = "/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Account Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAccountAsync ()
        {
             ApiResponse<Object> localVarResponse = await GetAccountAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Retrieve account details. &lt;br&gt;&lt;br&gt; Returns a account object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/account &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAccountAsyncWithHttpInfo ()
        {

            var localVarPath = "/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Access Account Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Object</returns>
        public Object UpdateAccessAccountById (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = UpdateAccessAccountByIdWithHttpInfo(updateAccessAccountByIdParameters, accessAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Access Account Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateAccessAccountByIdWithHttpInfo (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId)
        {
            // verify the required parameter 'updateAccessAccountByIdParameters' is set
            if (updateAccessAccountByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateAccessAccountByIdParameters' when calling Accounts->UpdateAccessAccountById");
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->UpdateAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter
            if (updateAccessAccountByIdParameters != null && updateAccessAccountByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateAccessAccountByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAccessAccountByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Access Account Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAccessAccountByIdAsync (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId)
        {
             ApiResponse<Object> localVarResponse = await UpdateAccessAccountByIdAsyncWithHttpInfo(updateAccessAccountByIdParameters, accessAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Access Account Update an existing access account. &lt;br&gt;&lt;br&gt; Returns a access account object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Name\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/accessaccount/$ACCESSACCOUNT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccessAccountByIdParameters">Request body</param>
        /// <param name="accessAccountId">AccessAccountId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAccessAccountByIdAsyncWithHttpInfo (UpdateAccessAccountByIdParameters updateAccessAccountByIdParameters, string accessAccountId)
        {
            // verify the required parameter 'updateAccessAccountByIdParameters' is set
            if (updateAccessAccountByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateAccessAccountByIdParameters' when calling Accounts->UpdateAccessAccountById");
            // verify the required parameter 'accessAccountId' is set
            if (accessAccountId == null)
                throw new ApiException(400, "Missing required parameter 'accessAccountId' when calling Accounts->UpdateAccessAccountById");

            var localVarPath = "/accessaccount/{AccessAccountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accessAccountId != null) localVarPathParams.Add("AccessAccountId", Configuration.ApiClient.ParameterToString(accessAccountId)); // path parameter
            if (updateAccessAccountByIdParameters != null && updateAccessAccountByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateAccessAccountByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAccessAccountByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccessAccountById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
