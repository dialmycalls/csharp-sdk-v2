/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.DialMyCalls.Client;
using IO.DialMyCalls.Model;

namespace IO.DialMyCalls.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContacts : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Object</returns>
        Object CreateContact (CreateContactParameters createContactParameters);

        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateContactWithHttpInfo (CreateContactParameters createContactParameters);
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        Object DeleteContactById (string contactId);

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteContactByIdWithHttpInfo (string contactId);
        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        Object GetContactById (string contactId);

        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetContactByIdWithHttpInfo (string contactId);
        /// <summary>
        /// List Contacts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Object</returns>
        Object GetContacts (string range = null);

        /// <summary>
        /// List Contacts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetContactsWithHttpInfo (string range = null);
        /// <summary>
        /// List Contacts in Group
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Object</returns>
        Object GetContactsByGroupId (string groupId);

        /// <summary>
        /// List Contacts in Group
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetContactsByGroupIdWithHttpInfo (string groupId);
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        Object UpdateContactById (UpdateContactByIdParameters updateContactByIdParameters, string contactId);

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateContactByIdWithHttpInfo (UpdateContactByIdParameters updateContactByIdParameters, string contactId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateContactAsync (CreateContactParameters createContactParameters);

        /// <summary>
        /// Add Contact
        /// </summary>
        /// <remarks>
        /// Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactAsyncWithHttpInfo (CreateContactParameters createContactParameters);
        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteContactByIdAsync (string contactId);

        /// <summary>
        /// Delete Contact
        /// </summary>
        /// <remarks>
        /// Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactByIdAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetContactByIdAsync (string contactId);

        /// <summary>
        /// Get Contact
        /// </summary>
        /// <remarks>
        /// Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactByIdAsyncWithHttpInfo (string contactId);
        /// <summary>
        /// List Contacts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetContactsAsync (string range = null);

        /// <summary>
        /// List Contacts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactsAsyncWithHttpInfo (string range = null);
        /// <summary>
        /// List Contacts in Group
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetContactsByGroupIdAsync (string groupId);

        /// <summary>
        /// List Contacts in Group
        /// </summary>
        /// <remarks>
        /// Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetContactsByGroupIdAsyncWithHttpInfo (string groupId);
        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateContactByIdAsync (UpdateContactByIdParameters updateContactByIdParameters, string contactId);

        /// <summary>
        /// Update Contact
        /// </summary>
        /// <remarks>
        /// Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactByIdAsyncWithHttpInfo (UpdateContactByIdParameters updateContactByIdParameters, string contactId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Contacts : IContacts
    {
        private IO.DialMyCalls.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Contacts"/> class.
        /// </summary>
        /// <returns></returns>
        public Contacts(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Contacts"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Contacts(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.DialMyCalls.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.DialMyCalls.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Contact Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Object</returns>
        public Object CreateContact (CreateContactParameters createContactParameters)
        {
             ApiResponse<Object> localVarResponse = CreateContactWithHttpInfo(createContactParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contact Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateContactWithHttpInfo (CreateContactParameters createContactParameters)
        {
            // verify the required parameter 'createContactParameters' is set
            if (createContactParameters == null)
                throw new ApiException(400, "Missing required parameter 'createContactParameters' when calling Contacts->CreateContact");

            var localVarPath = "/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createContactParameters != null && createContactParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createContactParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add Contact Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateContactAsync (CreateContactParameters createContactParameters)
        {
             ApiResponse<Object> localVarResponse = await CreateContactAsyncWithHttpInfo(createContactParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Contact Add a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactParameters">Request body</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateContactAsyncWithHttpInfo (CreateContactParameters createContactParameters)
        {
            // verify the required parameter 'createContactParameters' is set
            if (createContactParameters == null)
                throw new ApiException(400, "Missing required parameter 'createContactParameters' when calling Contacts->CreateContact");

            var localVarPath = "/contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createContactParameters != null && createContactParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createContactParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Contact Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        public Object DeleteContactById (string contactId)
        {
             ApiResponse<Object> localVarResponse = DeleteContactByIdWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contact Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteContactByIdWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->DeleteContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete Contact Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteContactByIdAsync (string contactId)
        {
             ApiResponse<Object> localVarResponse = await DeleteContactByIdAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Contact Delete a contact from your contact list. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactByIdAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->DeleteContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Contact Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        public Object GetContactById (string contactId)
        {
             ApiResponse<Object> localVarResponse = GetContactByIdWithHttpInfo(contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Contact Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetContactByIdWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->GetContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get Contact Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetContactByIdAsync (string contactId)
        {
             ApiResponse<Object> localVarResponse = await GetContactByIdAsyncWithHttpInfo(contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Contact Retrieve a contact to your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContactByIdAsyncWithHttpInfo (string contactId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->GetContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Contacts Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Object</returns>
        public Object GetContacts (string range = null)
        {
             ApiResponse<Object> localVarResponse = GetContactsWithHttpInfo(range);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Contacts Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetContactsWithHttpInfo (string range = null)
        {

            var localVarPath = "/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Contacts Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetContactsAsync (string range = null)
        {
             ApiResponse<Object> localVarResponse = await GetContactsAsyncWithHttpInfo(range);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Contacts Retrieve a list of contacts. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="range">Range (ie \&quot;records&#x3D;201-300\&quot;) of contacts requested (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContactsAsyncWithHttpInfo (string range = null)
        {

            var localVarPath = "/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (range != null) localVarHeaderParams.Add("Range", Configuration.ApiClient.ParameterToString(range)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Contacts in Group Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Object</returns>
        public Object GetContactsByGroupId (string groupId)
        {
             ApiResponse<Object> localVarResponse = GetContactsByGroupIdWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Contacts in Group Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetContactsByGroupIdWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Contacts->GetContactsByGroupId");

            var localVarPath = "/contacts/{GroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupId != null) localVarPathParams.Add("GroupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// List Contacts in Group Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetContactsByGroupIdAsync (string groupId)
        {
             ApiResponse<Object> localVarResponse = await GetContactsByGroupIdAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Contacts in Group Retrieve a list of contacts in a contact group. &lt;br&gt;&lt;br&gt; Returns a list of contact objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/contacts/$GROUP_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">GroupId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetContactsByGroupIdAsyncWithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling Contacts->GetContactsByGroupId");

            var localVarPath = "/contacts/{GroupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groupId != null) localVarPathParams.Add("GroupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByGroupId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Contact Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Object</returns>
        public Object UpdateContactById (UpdateContactByIdParameters updateContactByIdParameters, string contactId)
        {
             ApiResponse<Object> localVarResponse = UpdateContactByIdWithHttpInfo(updateContactByIdParameters, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateContactByIdWithHttpInfo (UpdateContactByIdParameters updateContactByIdParameters, string contactId)
        {
            // verify the required parameter 'updateContactByIdParameters' is set
            if (updateContactByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateContactByIdParameters' when calling Contacts->UpdateContactById");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->UpdateContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (updateContactByIdParameters != null && updateContactByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateContactByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update Contact Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateContactByIdAsync (UpdateContactByIdParameters updateContactByIdParameters, string contactId)
        {
             ApiResponse<Object> localVarResponse = await UpdateContactByIdAsyncWithHttpInfo(updateContactByIdParameters, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact Update an existing contact in your contact list. &lt;br&gt;&lt;br&gt; Returns a contact object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/contact/$CONTACT_ID &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.DialMyCalls.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactByIdParameters">Request body</param>
        /// <param name="contactId">ContactId</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContactByIdAsyncWithHttpInfo (UpdateContactByIdParameters updateContactByIdParameters, string contactId)
        {
            // verify the required parameter 'updateContactByIdParameters' is set
            if (updateContactByIdParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateContactByIdParameters' when calling Contacts->UpdateContactById");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling Contacts->UpdateContactById");

            var localVarPath = "/contact/{ContactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (contactId != null) localVarPathParams.Add("ContactId", Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (updateContactByIdParameters != null && updateContactByIdParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateContactByIdParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactByIdParameters; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey")))
            {
                localVarHeaderParams["X-Auth-ApiKey"] = Configuration.GetApiKeyWithPrefix("X-Auth-ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
